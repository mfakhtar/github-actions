name: Terraform Module Test
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test-modue:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: test/github
    env:
      TF_CLOUD_HOSTNAME: ${{vars.TF_CLOUD_HOSTNAME}}
      TF_CLOUD_ORGANIZATION: ${{vars.TF_CLOUD_ORGANIZATION}}
      TF_WORKSPACE: ${{vars.TF_WORKSPACE}}
      TF_VAR_token: ${{vars.TFE_TOKEN}}
      TF_TOKEN_app_terraform_io: "OPeQEUHt8kSLtQ.atlasv1.zQC78LxKf4y0hdSxZvL59OXtv6vjX2RTgx3PC8xuRWgyMt2apPx1HwLep4E4d6AHdGM"
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

        # The following is only required for testing new changes in the branch
        # CLI workflow cannot upload the module files that are in upper directory
      - name: Set up local module
        run: |
          mkdir -p modules/pet
          cp ../../*.tf modules/pet
          cp -R ../../templates modules/pet/
          cat << EOF > backend.tf
          terraform {
          cloud {
          token = "PKglKzmPZW5y0A.atlasv1.wEvDJfzKd8zMoeROVUUfzkRc6S3LSWAWD0hLpBvsiNuBxgzCDqB1DNXDezzarEKi3YY"
          }
          }
          EOF

          ls -lh
      
      - name: Terraform Version
        run: terraform -v

      - name: Initialize Terraform
        run: terraform init
      
      - name: Validate Terraform
        run: terraform validate

      - name: Plan changes
        run: terraform plan -no-color
      
      - name: Apply changes
        run: terraform apply -auto-approve -no-color
      
      - name: Run additional tests
        id: tests
        run: |
          terraform state list
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v6
   #     if: github.event_name == 'pull_request'
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
          APPLY: ${{ steps.apply.outputs.stdout }}
        with:
          github-token: ${{ secrets.TF_GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan and Apply</summary>

            \`\`\`terraform\n
            ${process.env.PLAN}
            \`\`\`

            \`\`\`terraform\n
            ${process.env.Apply}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Destroy
        run: terraform destroy -auto-approve
